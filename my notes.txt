DB relationship:
	In flights class we can add property:
		passengers = db.relationship("passenger", backref="flight", lazy=True)
			backref => we can access from passenger class to a flight by flight property
			lazy => don't load all passengers when a flight object created, load any time asked.
Change page status code:
	return "Not found", 404  => 404 will sent to user as status code
Creating an API for ours:
	names = ["ali","amir","saeed"]
	return jsonify({
		"origin": flight.origin,
		"destination": flight.destination,
		"passengers": names
	})
	
Javascript:
	EventListener:
		document.addEventListener("DOMContentLoaded", function() { Any code that we want to run after DOM loaded completely })
	Css query selector:
		document.querySelector("h1").innerHTML="Add text to this document" //Select the firest match element by CSS selector
		document.querySelectorAll("h1") // return all tags
	Format string:
		alert(`this is a format string sample with back tick and ${I_am_a_var}.`)
	Variables:
		const -> constant
		let -> if used inside {} the var is just valid inside defined scope.
		var -> if even used inside {} the var is valid in the defined function even outside of {}
	Arrow function:
		() => { alert("Arrow function") }  //Defining no argument arrow function
		x => { alert("arrow function") }
		x => x*2    //Get x and return x*2
	forEach:
		document.querySelectorAll("h1").forEach( (h1)=> { h1.style.color="red"} )
	In arrow function "this" keyword refer to enclosing defination area:
		
Exercise:
	Button for change color with forEach
01:00